/*
 *
 * MIT License
 *
 * Copyright (c) 2020 Dr. Konstantin Selyunin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Author: Dr. Konstantin Selyunin
 * Version: {{ version }}
 * Date: {{ date }}
*/
#ifndef {{ define_guard }}
#define {{ define_guard }}

typedef enum {
    // configuration register addresses
{%- for register in cregs %}
    {{ '{:<40s}'.format(register.name + '_ADDR_ENUM') }} = {{ '{}'.format(register.address) }},
{%- endfor %}
} CREGS_ADDR_ENUM;

{% for register in cregs %}
#define {{ '{:<40s}'.format(register.name + '_ADDR') }} {{ '(0x{:02X})'.format(register.address) }}
{%- endfor %}


#define {{ '{:<36s}'.format('CREGS_ADDR_START') }} {{ cregs[0].address }}
#define {{ '{:<36s}'.format('CREGS_ADDR_END') }} {{ cregs[-1].address }}
#define {{ '{:<36s}'.format('CREGS_SIZE') }} {{ cregs[-1].address  - cregs[0].address + 1 }}

typedef enum {
    // data register addresses
{%- for register in dregs %}
    {{ '{:<40s}'.format(register.name + '_ADDR_ENUM') }} = {{ '{}'.format(register.address) }},
{%- endfor %}
} DREGS_ADDR_ENUM;

{% for register in dregs %}
#define {{ '{:<40s}'.format(register.name + '_ADDR') }} {{ '(0x{:02X})'.format(register.address) }}
{%- endfor %}

#define {{ '{:<36s}'.format('DREGS_ADDR_START') }} {{ dregs[0].address }}
#define {{ '{:<36s}'.format('DREGS_ADDR_END') }} {{ dregs[-1].address }}
#define {{ '{:<36s}'.format('DREGS_SIZE') }} {{ dregs[-1].address  - dregs[0].address + 1 }}


typedef enum {
    // commands register addresses
{%- for register in commands %}
    {{ '{:<40s}'.format(register.name + '_ADDR_ENUM') }} = {{ '{}'.format(register.address) }},
{%- endfor %}
} COMMANDS_ADDR_ENUM;

{% for register in commands %}
#define {{ '{:<40s}'.format(register.name + '_ADDR') }} {{ '(0x{:02X})'.format(register.address) }}
{%- endfor %}


#define {{ '{:<36s}'.format('COMMANDS_SIZE') }} {{ commands.__len__() }}

#endif //{{ define_guard }}
